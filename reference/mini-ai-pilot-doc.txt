{"cells": [{"cell_type": "code", "execution_count": null, "metadata": {}, "outputs": [], "source": ["# === Mini AI Pilot (Beginner) ===\n", "import numpy as np, pandas as pd, math\n", "from sklearn.model_selection import train_test_split\n", "from sklearn.ensemble import RandomForestRegressor\n", "from sklearn.metrics import mean_absolute_error, r2_score\n", "\n", "np.random.seed(0); N=200\n", "zones=[(\"Villepinte\",48.97,2.55,1.2),(\"Viry-Chatillon\",48.67,2.38,1.0),(\"Roissy-en-Brie\",48.79,2.65,1.1)]\n", "rows=[]\n", "for i in range(N):\n", "    name, zlat, zlon, dbase = zones[np.random.choice(len(zones))]\n", "    lat = zlat + np.random.normal(0,0.01); lon = zlon + np.random.normal(0,0.015)\n", "    hour = np.random.randint(6,23); dow  = np.random.randint(0,7)\n", "    peak = 1.0 + (0.45 if (7<=hour<=9 or 17<=hour<=20) else 0); weekend = 1 if dow in [5,6] else 0\n", "    demand = dbase * peak * (1.15 if weekend else 1.0)\n", "    soc = np.clip(np.random.normal(0.45,0.18),0.10,0.95)\n", "    base_minutes_full = 420\n", "    minutes_to_empty = base_minutes_full * (1.0/demand) * soc + np.random.normal(0,20)\n", "    minutes_to_empty = max(5, minutes_to_empty)\n", "    rows.append(dict(vehicle_id=f\"V-{1000+i}\", zone_name=name, latitude=lat, longitude=lon,\n", "        soc_now=round(float(soc),3), hour=hour, day_of_week=dow,\n", "        demand_zone_score=round(float(demand),3), minutes_to_empty=round(float(minutes_to_empty),1)))\n", "df = pd.DataFrame(rows)\n", "\n", "features=[\"soc_now\",\"hour\",\"day_of_week\",\"demand_zone_score\"]\n", "X=df[features].values; y=df[\"minutes_to_empty\"].values\n", "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.25,random_state=0)\n", "model = RandomForestRegressor(n_estimators=200,random_state=0).fit(Xtr,ytr)\n", "pred = model.predict(Xte)\n", "print(\"MAE (minutes):\", round(mean_absolute_error(yte,pred),2))\n", "print(\"R^2:\", round(r2_score(yte,pred),3))\n", "\n", "df[\"pred_minutes_to_empty\"] = model.predict(df[features].values)\n", "df[\"pred_minutes_to_20pct\"] = np.maximum(0.0, df[\"pred_minutes_to_empty\"] * (df[\"soc_now\"]-0.20)/np.maximum(df[\"soc_now\"],1e-6))\n", "\n", "HUB_LAT, HUB_LON = 48.866, 2.400\n", "def hav(lat1,lon1,lat2,lon2):\n", "    R=6371.0; p1,p2 = np.radians(lat1), np.radians(lat2)\n", "    dphi = np.radians(lat2-lat1); dl = np.radians(lon2-lon1)\n", "    a = np.sin(dphi/2)**2 + np.cos(p1)*np.cos(p2)*np.sin(dl/2)**2\n", "    return 2*R*np.arcsin(np.sqrt(a))\n", "df[\"dist_km_to_hub\"] = hav(HUB_LAT,HUB_LON, df[\"latitude\"], df[\"longitude\"])\n", "\n", "def norm(s): import numpy as _np; s=_np.asarray(s,float); return (s-s.min())/(s.max()-s.min()+1e-9)\n", "df[\"priority_score\"] = 0.60*(1-norm(df[\"pred_minutes_to_20pct\"])) + 0.25*norm(df[\"demand_zone_score\"]) + 0.15*(1-norm(df[\"dist_km_to_hub\"]))\n", "\n", "dispatch_cols=[\"vehicle_id\",\"zone_name\",\"soc_now\",\"pred_minutes_to_20pct\",\"demand_zone_score\",\"dist_km_to_hub\",\"priority_score\",\"hour\",\"day_of_week\"]\n", "dispatch = df.sort_values(\"priority_score\",ascending=False)[dispatch_cols].reset_index(drop=True)\n", "\n", "dispatch.to_csv(\"dispatch_list.csv\",index=False)\n", "df.to_csv(\"synthetic_gbfs.csv\",index=False)\n", "print(\"Saved: dispatch_list.csv  and  synthetic_gbfs.csv\")"]}], "metadata": {"kernelspec": {"display_name": "Python 3", "language": "python", "name": "python3"}}, "nbformat": 4, "nbformat_minor": 2}